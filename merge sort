// merge sort

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Structure to represent a book
typedef struct {
    int ISBN;
    char title[100];
    char author[100];
} Book;

// Merge function to merge two sorted subarrays
void merge(Book arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temporary arrays
    Book L[n1], R[n2];

    // Copy data to temporary arrays L[] and R[]
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temporary arrays back into arr[l..r]
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i].ISBN <= R[j].ISBN) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Merge sort function
void mergeSort(Book arr[], int l, int r) {
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for large l and h
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // Merge the sorted halves
        merge(arr, l, m, r);
    }
}

int main() {
    int N_values[] = {100, 500, 1000, 5000, 10000}; // Different values of N
    int num_N_values = sizeof(N_values) / sizeof(N_values[0]);

    FILE *fp;
    fp = fopen("time_vs_N.dat", "w");
    if (fp == NULL) {
        printf("Error opening file.\n");
        return 1;
    }

    // Plotting header
    fprintf(fp, "# N\tTime Taken (seconds)\n");

    // Repeat the experiment for different values of N
    for (int i = 0; i < num_N_values; i++) {
        int N = N_values[i];
        Book books[N];

        // Generate random ISBNs for books
        srand(time(NULL));
        for (int j = 0; j < N; j++) {
            books[j].ISBN = rand() % 1000000 + 1; // Assuming maximum ISBN is 999999
        }

        clock_t start = clock(); // Start measuring time

        // Sorting books based on ISBN
        mergeSort(books, 0, N - 1);

        clock_t end = clock(); // Stop measuring time

        // Calculating the time taken
        double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

        // Writing data to file
        fprintf(fp, "%d\t%lf\n", N, cpu_time_used);
    }
}
